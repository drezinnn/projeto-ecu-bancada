/***********************************************************************
                      DECLARAÇÃO DAS VARIÁVEIS
***********************************************************************/
void telainicial();
void telasenha();
void logomarelli();

void telainicial(){
  display.clearDisplay();
  display.setTextSize(1); // Fonte do texto
  display.setTextColor(WHITE); // Cor do texto
  // (18 caracteres horizontal e 6 caracteres por vericais)
  display.setCursor(25,15); // Posiciona o cursor (linha, coluna)
  display.println("ECU PROTOTIPO"); // Imprime mensagem
  display.setCursor(40,25); // Posiciona o cursor (linha, coluna)
  display.println("ESTETICO"); // Imprime mensagem
  display.setCursor(65,46); // Posiciona o cursor (linha, coluna)
  display.println("Powered by"); // Imprime mensagem
  display.setCursor(84,55); // Posiciona o cursor (linha, coluna)
  display.println("Marelli");
  display.display();
  delay(200); 
}

void telasenha()
{
  display.clearDisplay();
  display.setTextSize(1); // Fonte do texto
  display.setTextColor(WHITE); // Cor do texto
  // (18 caracteres horizontal e 6 caracteres por vericais)
  display.setCursor(10,15); // Posiciona o cursor (linha, coluna)
  display.println("MODO CONFIGURACAO"); // Imprime mensagem
  display.setCursor(15,25); // Posiciona o cursor (linha, coluna)
  display.println("Digite a Senha:"); // Imprime mensagem
  display.setCursor(45,46); // Posiciona o cursor (linha, coluna)
  display.println("_ _ _ _"); // Imprime mensagem
  display.display();
  int poshorizontalinicial=45;
  for(int i=0; i<4; i++)
  {
    vetorsenha[i]=opcaoescolhida();
    display.setCursor(poshorizontalinicial,46); // Posiciona o cursor (linha, coluna)
    display.print(vetorsenha[i]);
    Serial.println(vetorsenha[i]);
    display.display();
    poshorizontalinicial= poshorizontalinicial+12;
  }
  senha = 1000*vetorsenha[0]+100*vetorsenha[1]+10*vetorsenha[2]+vetorsenha[3];
  Serial.println(senha);
    if(senha == 8765)               //se a senha digitada estiver correta, ou seja, for 8765, ele entra em modo de configuração
    {
      display.clearDisplay();
      display.setTextSize(1); // Fonte do texto
      display.setTextColor(WHITE); // Cor do texto
      // (18 caracteres horizontal e 6 caracteres por vericais)
      display.setCursor(25,30); // Posiciona o cursor (linha, coluna)
      display.println("SENHA CORRETA"); // Imprime mensagem
      display.display();
      delay(1000);
      estanatelasenha=false;
      estanatelaopcoes=true;
    }
    if(senha == 1111)                   //se a senha digitada for 1111 ele volta ao modo de operação normal, sai do modo de configuração
    {
      estanatelasenha=false;
      estanatelaopcoes=false;
    }
    if(senha != 8765 && senha != 1111)    //caso a senha digitada esteja incorreta ele continua pedindo a senha até que acerte ou digite o codigo de saida, que é 1111
      {
      estanatelasenha=true;
      estanatelaopcoes=false;
      display.clearDisplay();
      display.setTextSize(1); // Fonte do texto
      display.setTextColor(WHITE); // Cor do texto
      // (18 caracteres horizontal e 6 caracteres por vericais)
      display.setCursor(20,30); // Posiciona o cursor (linha, coluna)
      display.println("SENHA INCORRETA"); // Imprime mensagem
      display.display();  
      delay(1000);
      interfacedisplay();
  }
}

void logomarelli(){
  display.clearDisplay();
  display.setTextColor(BLACK, WHITE);
static const unsigned char PROGMEM image_data_Saraarray[] = { 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfe, 
    0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfe, 
    0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfe, 
    0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7c, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x0f, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x3f, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xe0, 0x00, 0x7f, 0xff, 0x00, 0x01, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xf8, 0x01, 0xff, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0x0f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xfe, 
    0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfe, 
    0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfe, 
    0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xe3, 0xfc, 0x7f, 0xcf, 0xf8, 0x0f, 0xf8, 0x01, 0xe7, 0xff, 0x3f, 0xf9, 0xff, 0xfe, 
    0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xf8, 0x00, 0xf0, 0x01, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc0, 0xf0, 0x7f, 0x03, 0xf8, 0xf0, 0x70, 0xff, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc0, 0x60, 0x7f, 0x03, 0xf8, 0xfc, 0x71, 0xff, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc0, 0x00, 0x7e, 0x31, 0xf8, 0xfc, 0x70, 0xff, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc2, 0x04, 0x7c, 0x30, 0xf8, 0x70, 0x70, 0x03, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc3, 0x0c, 0x7c, 0x30, 0xf8, 0x01, 0xf0, 0xff, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc3, 0x9c, 0x78, 0x00, 0x78, 0xe1, 0xf1, 0xff, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc3, 0xfc, 0x70, 0xfc, 0x38, 0xf0, 0xf0, 0xff, 0xe3, 0xfe, 0x1f, 0xf1, 0xff, 0xfe, 
    0xff, 0xc3, 0xfc, 0x71, 0xfe, 0x38, 0xf8, 0x70, 0x00, 0xe0, 0x06, 0x00, 0x31, 0xff, 0xfe, 
    0xff, 0xe7, 0xfe, 0x73, 0xff, 0x38, 0xfc, 0x78, 0x01, 0xe0, 0x07, 0x00, 0x39, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe
};
  display.drawBitmap(5, 2, image_data_Saraarray, 119, 61, 1); // Coordenada X, coordenada Y, nome da imagem, 
                             // tamanho na coordenada x, tamanho na coordenada y, nome do arquivo bitmap (sempre 1)
  display.display();
}